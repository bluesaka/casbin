# 请求定义
[request_definition]
# sub(Subject)，请求主体
# obj(Object)，请求对象
# act(Action)，请求操作
r = sub, obj, act

# 策略定义
[policy_definition]
p = sub, obj, act
#p = sub, obj, act, eft # 可以定义eft，不使用默认值allow

#[matchers]
#m = r.sub == p.sub && r.obj == p.obj && r.act == p.act || r.sub == "root"

# 策略生效范围定义
[policy_effect]
# 存在任意一个决策结果为allow的匹配规则，则最终决策结果为allow，p.eft是决策结果
# 例如角色A对/user get有权限，张三、李四属于角色A，则张三李四都可以访问
e = some(where (p.eft == allow))

# 如果不想给李四权限，则在策略中加上李四，/user,get,deny，策略生效范围改成如下
e = some(where (p.eft == allow)) && !some(where (p.eft == deny))

# 角色定义
[role_definition]
# _, _表示角色继承关系的前项和后项，前项拥有后项的全部权限
# 类似 admin >= member >= guest
# 例如在policy中定义: g, mike, role1  表示mike属于角色role1
g = _, _
#g2 = _, _

# 请求和策略的匹配规则
[matchers]
# g(r.sub, p.sub)：请求主体和策略中定义的主体要相同
# r.obj == p.obj: 请求的资源必须等于策略文件中定义的资源
# r.act == p.act: 请求的操作必须等于策略文件中定义的资源操作
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act
